Next JS essentials


- Use Link component given by next js, when linking within the app and a attribute when linking 
to an external page. 
- Don't use classname to Link component, rather use it in a attribute, placing the attribute 
within the Link component. 
- Use Image component given by next js, rather than using img attribute. benifits are responsiveness, 
optimization, lazy loading, not shipping large images to small viewports etc..
- When adding external, use Script component given by next js, to introduce lazy on loading which 
loads the script during browser idle time. idle time is the time when user is not interacting with 
the browser or no events are fired by the user such as keyboard press, mouse up, click, out etc.  
- use classname component given by next js to switch between classes smoothly. 


-- pre-rendering --
Next js generates STATIC HTML for each page in advance instead of having it all done by client side JavaScript. Prerendering results
in better performance and SEO. 
Check pre-rendering by, disable javascript in your browser. 
Note - CSS won't load when you disable JavaScript. 
Applications made with create-react-app is rendered on the client side. So diabling JavaScript will not load the application. 
So create-react-app doesn't prerender while next js app prerenders. 

-- Hydration -- it converts STATIC to DYNAMIC or Interactive using minmal JavaSript code
Each generated HTML is associated with minimal JavaScript. When a page is loaded by the browser, its JavaScript code runs and makes 
the page fully interactive. This process of minimizing JS code and making a static page fully interactive is called Hydration. 

During development phase, server side rendering happens. i.e. HTML is generated on each request. [npm run dev]
During production phase, static generation happens. i.e. HTML is generated at build time and is reused for each request. [npm run prod]

The above is default mode for next js app. But you can coose static generation or server side rendering for each pages. 
Recommended by next js to use static generation for faster delivery of HTML page to user. 
If data is chaging on every request, in that case only server side rendering to be preferred. ex. cart entries, pagination etc. 

Rather than using server side rendering you can prefer, static generation with data using an async function called, getStaticProps. 

getStaicProps
in development, getStaicProps runs on every request. 
in production, getStaicProps runs at build time. But you can configure it. 

For server side rendering, use getServerSideProps instead of getStaticProps. 

Time to first byte for getServerSideProps is going to be slower than getStaicProps. 

Or you can prerender without data, then load data on client side. 

You can use useSWR hook provided by next js, for client side data fetching. 
Simply, 
const { data, error } = useSWR('/api/user', fetch); // rather than using fetch or axios, useSWR can do that job


// for static rendering : getStaicProps
// for server side rendering : getServerSideProps
// for static rendering as well as data fetching : useSWR
